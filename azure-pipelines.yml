# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: DownloadSecureFile@1
  name: caCertificate
  inputs:
    secureFile: 'webrequest.elegant.key.pfx'
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.SourcesDirectory)\src'
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    TargetFolder: '$(Build.SourcesDirectory)\src'
- task: PowerShell@2
  displayName: 'Add the PFX file to the certificate store.'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."

      $pfxpath = '$(caCertificate.secureFilePath)'
      $password = ConvertTo-SecureString {'$(signingCert.password)'} –asplaintext –force
      Get-ChildItem -Path $pfxpath | Import-PfxCertificate -CertStoreLocation Cert:\CurrentUser\My -Exportable -Password $password
      # Add-Type -AssemblyName System.Security
      # $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      # $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      # $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      # $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      # $store.Add($cert)
      # $store.Close()

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
