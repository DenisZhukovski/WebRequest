# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - master
    - develop
    - release/*
  paths:
    exclude:
    - README.md
    - docs/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'WebRequest.Elegant.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- checkout: self
  persistCredentials: true
  
- task: Bash@3
  displayName: Restore nuget
  inputs:
    targetType: 'inline'
    script: dotnet restore $(solution)

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud'
    organization: 'deniszhukovski'
    scannerMode: 'MSBuild'
    projectKey: 'DenisZhukovski_WebRequest.Elegant'
    projectName: 'WebRequest.Elegant'
    extraProperties: |
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)\**\coverage.opencover.xml
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\*.trx

- task: Bash@3
  displayName: Build Solution
  inputs:
    targetType: 'inline'
    script: dotnet build $(solution) --configuration $(buildConfiguration) --output $(outputDirectory)/

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '**/*[Tt]est*/*.csproj'
    publishTestResults: true
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true "/p:CoverletOutputFormat=\"opencover,Cobertura\""'

- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage result'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/*.cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverageResults'

- task: SonarCloudAnalyze@1
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'pack'
#     packagesToPack: '**/*.csproj'
#     versioningScheme: 'byPrereleaseNumber'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'external'
#     publishFeedCredentials: 'WebRequest.Elegant'